@tailwind base;
@tailwind components;
@tailwind utilities;

@font-face {
  font-family: "Swizer";
  src: url("/fonts/Switzer-Regular.otf");
}

.custom-font {
  font-family: "Swizer";
}

.glassy-div {
  background-color: rgba(0, 0, 0, 0.8); /* Dark translucent background */
  border-radius: 10px; /* Rounded corners */
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2); /* Subtle shadow for depth */
  padding: 20px; /* Inner padding */
  position: relative; /* Necessary for absolute positioning of circles */
  overflow: hidden; /* To contain the circles within the DIV */
}

.glassy-div::before,
.glassy-div::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: inherit;
  background: radial-gradient(
    circle,
    rgba(255, 255, Â  255, 0.1) 0%,
    rgba(0, 0, 0, 0.1) 100%
  );
  animation: gradient-animation 5s infinite linear;
}

.glassy-div::before {
  animation-delay: -2.5s; /* Offset the animation for a staggered effect */
}

@keyframes gradient-animation {
  0% {
    transform: scale(0.5);
  }
  50% {
    transform: scale(1.2);
  }
  100% {
    transform: scale(0.5);
  }
}

.animateBounce {
  animation: bounce 2s infinite;
}

@keyframes bounce {
  0%,
  100% {
    transform: translateY(-3%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }
  50% {
    transform: translateY(0);
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}






/* 3d  */

@property --_l {
  syntax: "<length>";
  initial-value: 0px;
  inherits: true;
}
@property --_r {
  syntax: "<length>";
  initial-value: 0px;
  inherits: true;
}

.img {
  --d: 18px;  /* the depth */
  --a: 20deg; /* the angle */
  
  /* the below value is based on the depth and the angle.
     the formula is a bit difficult to express so we update it manually
  */
  --x: 10px;
  
  /* control the size */
  aspect-ratio: 1.1; /* you can use 1 as ratio but I found 1.1 a little better */
  object-fit: cover;
  padding-block: var(--d);
  transform: perspective(400px) rotateY(calc(var(--_i,1)*var(--a)));
  outline: var(--d) solid #fff;
  outline-offset: calc(-1*var(--d));
  --_d: calc(100% - var(--d));
  --_l: 0px;
  --_r: 0px;
  clip-path: polygon(
    var(--_l) calc(var(--_d) - var(--x)),
    var(--_l) calc(var(--d)  + var(--x)), 
    var(--d) var(--d),var(--_d) var(--d),
    calc(var(--_d) + var(--_r)) calc(var(--d)  + var(--x)),
    calc(var(--_d) + var(--_r)) calc(var(--_d) - var(--x)),  
    var(--_d) var(--_d),var(--d) var(--_d)
   );
  transition: transform .3s,--_r .15s,--_l .15s .15s;
  transition-timing-function: linear;
  cursor: pointer;
}
.img:hover,
.img.alt{
  --_l: var(--d);
  --_r: var(--d);
  --_i: -1;
  transition-delay: 0s,.15s,0s;
}
.img.alt:hover {
  --_l: 0px;
  --_r: 0px;
  --_i: 1;
  transition-delay: 0s,0s,.15s;
}

/* we do a different animation for firefox since it doesn't support @property */
@supports not (-webkit-mask: paint(p)) {
  .img,
  .img.alt{
    transition: .3s;
  }
  .img:hover,
  .img.alt:hover {
    --_i: 0;
    --_l: var(--d);
    --_r: 0px;
  }
}

